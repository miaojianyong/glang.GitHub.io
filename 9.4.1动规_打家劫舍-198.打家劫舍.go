## 动规_打家劫舍

你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

示例 1 
输入：[1,2,3,1] 
输出：4 
解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。   偷窃到的最高金额 = 1 + 3 = 4 

示例 2 
输入：[2,7,9,3,1] 
输出：12 
解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。   偷窃到的最高金额 = 2 + 9 + 1 = 12 
即：根据题目获取数组中最大的元素和，限制是不能获取挨着的两个元素

func rob(nums []int) int {
	if len(nums)<1{ // 数组长度小于1 返回0
		return 0
	}
	if len(nums)==1{ // 数组长度等于1 返回数组第1个元素
		return nums[0]
	}
	if len(nums)==2{ // 数组长度等于2 返回数组中最大的元素
		return max(nums[0],nums[1])
	}
	dp :=make([]int,len(nums)) // 定义dp数组
	// 初始化 即1个就返回第1个元素 2个就返回最大元素
    dp[0]=nums[0]
	dp[1]=max(nums[0],nums[1])
	for i:=2;i<len(nums);i++{
		dp[i]=max(dp[i-2]+nums[i],dp[i-1])
	}
	return dp[len(dp)-1]
}

func max(a, b int) int {
	if a>b{
		return a
	}
	return b
}
